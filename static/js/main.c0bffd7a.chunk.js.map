{"version":3,"sources":["components/Chart/Chart.js","components/Chart/index.js","components/Chart2/index.js","components/Chart2/Chart2.js","components/Slider/Slider.js","components/Slider/index.js","App.js","serviceWorker.js","index.js"],"names":["Chart","getChartOption","props","startYear","backgroundColor","selectedLegends","updatedData","updateDataByAddtionalPrice","legendState","forEach","name","includes","xAxisData","range","countOfYears","unshift","grid","left","right","bottom","top","containLabel","show","borderWidth","legend","orient","data","map","icon","selected","tooltip","trigger","position","axisPointer","type","opacity","textStyle","color","confine","formatter","value","seriesName","toFixed","xAxis","axisLine","axisTick","splitLine","yAxis","nameLocation","nameGap","axisLabel","series","prices","onLegendItemClick","handleLegendChange","filter","onEvents","legendselectchanged","this","priceGivenOnSlider","item","additionalPrice","carbonPriceToday","CO2perTon","currentPrice","idx","height","width","style","option","notMerge","lazyUpdate","Component","Chart2","emissionsToday","emissionsLast","rate","percentGivenOnSlider","pricesByYear","i","avgByYear","diffOfMonthByYear","useStyles","makeStyles","theme","root","paddingLeft","margin","spacing","Slider","sliderStep","sliderMin","sliderMax","sliderValues","onSliderInput","classes","className","Typography","id","gutterBottom","aria-labelledby","step","marks","label","onChange","min","max","valueLabelDisplay","priceSliderRange","percentSliderRange","priceGivenOfCO2","percentGiven","App","getSliderArray","parseInt","num","state","value1","percent","priceSliderValues","percentSliderValues","e","setState","validLegends","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0bffd7a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport range from 'lodash/range';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\nclass Chart extends Component {\r\n  updateDataByAddtionalPrice() {\r\n    const { data, priceGivenOnSlider, countOfYears } = this.props;\r\n    const updatedData = data.map(item => {\r\n      const additionalPrice = (priceGivenOnSlider - item.carbonPriceToday) / countOfYears;\r\n      const { CO2perTon, currentPrice } = item;\r\n      item['prices'] = range(0, countOfYears).map(idx => additionalPrice * idx * CO2perTon + currentPrice);\r\n      return item;\r\n    });\r\n    return updatedData;\r\n  }\r\n\r\n  getChartOption = () => {\r\n    const { startYear, backgroundColor, selectedLegends } = this.props;\r\n\r\n    const updatedData = this.updateDataByAddtionalPrice();\r\n\r\n    const legendState = {};\r\n    updatedData.forEach(({ name }) => legendState[name] = selectedLegends.includes(name));\r\n\r\n    // NOTE: Make x axis data\r\n    const xAxisData = range(startYear, startYear + this.props.countOfYears - 1);\r\n    xAxisData.unshift('Today');\r\n\r\n    const options = {\r\n      grid: {\r\n        left: 200,\r\n        right: 60,\r\n        bottom: 50,\r\n        top: 10,\r\n        containLabel: false,\r\n        show: true,\r\n        borderWidth: 2,\r\n        backgroundColor,\r\n      },\r\n      legend: {\r\n        show: true,\r\n        orient: 'vertical',\r\n        left: 0,\r\n        data: updatedData.map(({ name }) => ({\r\n          name,\r\n          icon: 'circle',\r\n        })),\r\n        selected: legendState\r\n      },\r\n      tooltip: {\r\n        trigger: 'item',\r\n        position: 'top',\r\n        axisPointer: {\r\n          type: 'shadow',\r\n        },\r\n        opacity: 0.9,\r\n        backgroundColor: '#ddd',\r\n        textStyle: {\r\n          color: '#000',\r\n        },\r\n        confine: true,\r\n        formatter: (data) => {\r\n          const { name, value, seriesName } = data;\r\n          const firstLine = `${seriesName} would cost<br/>`;\r\n          const secondLine = `<b>${value.toFixed(2)} kr</b> in ${name}`;\r\n          return firstLine + secondLine;\r\n        },\r\n      },\r\n      xAxis: [{\r\n        type: 'category',\r\n        axisLine: { show: false },\r\n        axisTick: { show: false },\r\n        splitLine: { show: false },\r\n        data: xAxisData,\r\n      }],\r\n      yAxis: [{\r\n        name: 'Price',\r\n        nameLocation: 'middle',\r\n        nameGap: 35,\r\n        type: 'value',\r\n        axisLabel: {\r\n          formatter: value => (\r\n            value < 1000 ? value : `${value / 1000}k`\r\n          ),\r\n        }\r\n      }],\r\n      series: updatedData.map(({ name, prices }) => ({\r\n        name,\r\n        type: 'line',\r\n        data: prices,\r\n      })),\r\n    };\r\n\r\n    return options;\r\n  }\r\n\r\n  onLegendItemClick = ({ selected }) => {\r\n    const { handleLegendChange, data } = this.props;\r\n    const selectedLegends = data\r\n      .map(({ name }) => name)\r\n      .filter(name => selected[name]);\r\n\r\n    handleLegendChange(selectedLegends);\r\n  }\r\n\r\n  onEvents = {\r\n    legendselectchanged: this.onLegendItemClick,\r\n  }\r\n\r\n  render() {\r\n    const { height, width } = this.props;\r\n    return (\r\n      <ReactEcharts\r\n        style={{ height, width }}\r\n        option={this.getChartOption()}\r\n        notMerge\r\n        lazyUpdate\r\n        onEvents={this.onEvents}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;","import Chart from './Chart';\r\nimport './Chart.css';\r\n\r\nexport default Chart;","import Chart2 from './Chart2';\r\nimport './Chart2.css';\r\n\r\nexport default Chart2;","import React from 'react';\r\nimport range from 'lodash/range';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\nexport default function Chart2({\r\n  height,\r\n  width,\r\n  backgroundColor,\r\n  emissionsToday,\r\n  emissionsLast,\r\n  startYear,\r\n  countOfYears,\r\n  carbonPriceToday,\r\n  priceGivenOnSlider,\r\n  percentGivenOnSlider,\r\n}) {\r\n  const rate = 0 - percentGivenOnSlider / 100;\r\n  const additionalPrice = (priceGivenOnSlider - carbonPriceToday) / (countOfYears - 1);\r\n  const pricesByYear = range(0, countOfYears).map(i => carbonPriceToday + additionalPrice * i);\r\n  const avgByYear = range(0, countOfYears).map(i => emissionsToday - emissionsLast * i / (countOfYears - 1));\r\n  const diffOfMonthByYear = range(1, countOfYears).map(i => pricesByYear[i] * avgByYear[i] * rate / 12);\r\n  diffOfMonthByYear.unshift(0);\r\n\r\n  const xAxisData = range(startYear, startYear + countOfYears - 1);\r\n  xAxisData.unshift('Today');\r\n\r\n  const option = {\r\n    grid: {\r\n      left: 200,\r\n      right: 60,\r\n      bottom: 50,\r\n      top: 10,\r\n      containLabel: false,\r\n      show: true,\r\n      borderWidth: 2,\r\n      backgroundColor,\r\n    },\r\n    legend: {\r\n      show: true,\r\n      orient: 'vertical',\r\n      left: 0,\r\n      icon: 'circle',\r\n    },\r\n    tooltip: {\r\n      trigger: 'item',\r\n      position: 'top',\r\n      axisPointer: {\r\n        type: 'shadow',\r\n      },\r\n      opacity: 0.9,\r\n      backgroundColor: '#ddd',\r\n      textStyle: {\r\n        color: '#000',\r\n      },\r\n      confine: true,\r\n      formatter: (data) => {\r\n        const { value } = data;\r\n        const firstLine = 'would cost<br/>';\r\n        const secondLine = `<b>${value.toFixed(2)} kr</b> in`;\r\n        return firstLine + secondLine;\r\n      },\r\n    },\r\n    xAxis: [{\r\n      type: 'category',\r\n      axisLine: { show: false },\r\n      axisTick: { show: false },\r\n      splitLine: { show: false },\r\n      data: xAxisData,\r\n    }],\r\n    yAxis: [{\r\n      name: 'Price',\r\n      nameLocation: 'middle',\r\n      nameGap: 35,\r\n      type: 'value',\r\n      axisLabel: {\r\n        formatter: value => (\r\n          value < 1000 ? value : `${value / 1000}k`\r\n        ),\r\n      }\r\n    }],\r\n    series: [{\r\n      name: 'Difference / month',\r\n      type: 'bar',\r\n      data: diffOfMonthByYear,\r\n    }],\r\n  }\r\n\r\n  return (\r\n    <ReactEcharts\r\n      style={{ height, width }}\r\n      option={option}\r\n      notMerge\r\n      lazyUpdate\r\n    />\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MuiSlider from '@material-ui/core/Slider';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: 700,\r\n    paddingLeft: 50,\r\n  },\r\n  margin: {\r\n    height: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function Slider({\r\n  value,\r\n  sliderStep,\r\n  sliderMin,\r\n  sliderMax,\r\n  sliderValues,\r\n  onSliderInput,\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography id=\"discrete-slider-always\" gutterBottom>\r\n        Price given on slider: {value}\r\n      </Typography>\r\n      <MuiSlider\r\n        value={value}\r\n        aria-labelledby=\"discrete-slider-always\"\r\n        step={sliderStep}\r\n        marks={[\r\n          {\r\n            value: sliderMin,\r\n            label: sliderMin,\r\n          },\r\n          {\r\n            value: sliderMax,\r\n            label: sliderMax,\r\n          },\r\n          ...sliderValues.map(value => ({ value })),\r\n        ]}\r\n        onChange={onSliderInput}\r\n        min={sliderMin}\r\n        max={sliderMax}\r\n        valueLabelDisplay=\"on\"\r\n      />\r\n    </div>\r\n  );\r\n}","import Slider from './Slider';\r\nimport './Slider.css';\r\n\r\nexport default Slider;","import React, { Component } from 'react';\r\nimport range from 'lodash/range';\r\nimport Chart from './components/Chart';\r\nimport Chart2 from './components/Chart2';\r\nimport Slider from './components/Slider';\r\nimport './App.css';\r\n\r\nconst countOfYears = 11; // This should be greater 1 than real size because of including today.\r\nconst startYear=2021;\r\nconst priceSliderRange = [200, 2500];\r\nconst priceSliderStep = 200;\r\nconst percentSliderRange = [-90, 200];\r\nconst percentSliderStep = 10;\r\nconst carbonPriceToday = 200;\r\nconst priceGivenOfCO2 = 1500;\r\nconst percentGiven = 50;\r\n\r\nconst emissionsToday = 8.93902859111264;\r\nconst emissionsLast = emissionsToday / 2;\r\n\r\nconst data = [\r\n  {\r\n    name: 'Banana',\r\n    currentPrice: 2,\r\n    CO2perTon: 0.000072,\r\n    carbonPriceToday,\r\n  },\r\n  {\r\n    name: 'Burger',\r\n    currentPrice: 30,\r\n    CO2perTon: 0.004,\r\n    carbonPriceToday,\r\n  },\r\n  {\r\n    name: 'Book',\r\n    currentPrice: 100,\r\n    CO2perTon: 0.0027,\r\n    carbonPriceToday,\r\n  },\r\n  {\r\n    name: '1L oil',\r\n    currentPrice: 12,\r\n    CO2perTon: 0.002392,\r\n    carbonPriceToday,\r\n  },\r\n  {\r\n    name: 'A flight to London',\r\n    currentPrice: 500,\r\n    CO2perTon: 0.212,\r\n    carbonPriceToday,\r\n  }\r\n];\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: priceGivenOfCO2, // default slider price\r\n      value1: priceGivenOfCO2, // price slider of component 2\r\n      percent: percentGiven, // % slider of component 2\r\n      selectedLegends: [(data[0] || {}).name],\r\n    }\r\n  }\r\n\r\n  getSliderArray = (min, max, step) => {\r\n    return range(0, parseInt((max - min) / step) + 1)\r\n      .map(num => min + step * num);\r\n  }\r\n\r\n  render() {\r\n    const { value, value1, percent } = this.state;\r\n    const priceSliderValues = this.getSliderArray(...priceSliderRange, priceSliderStep);\r\n    const percentSliderValues = this.getSliderArray(...percentSliderRange, percentSliderStep);\r\n    return (\r\n      <>\r\n        <div className=\"app-component1\">\r\n          <h2>Component 1</h2>\r\n          <Slider\r\n            value={value}\r\n            sliderMin={priceSliderRange[0]}\r\n            sliderMax={priceSliderRange[1]}\r\n            sliderStep={50}\r\n            sliderValues={priceSliderValues}\r\n            onSliderInput={(e, value) => {\r\n              this.setState({ value });\r\n            }}\r\n          />\r\n          <div className=\"app-chart\">\r\n            <Chart\r\n              height=\"100%\"\r\n              width=\"100%\"\r\n              backgroundColor=\"transparent\"\r\n              data={data || []}\r\n              startYear={startYear}\r\n              countOfYears={countOfYears}\r\n              priceGivenOnSlider={value}\r\n              selectedLegends={this.state.selectedLegends}\r\n              handleLegendChange={(validLegends) => this.setState({ selectedLegends: validLegends })}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"app-component2\">\r\n          <h2>Component 2</h2>\r\n          <Slider\r\n            value={value1}\r\n            sliderMin={priceSliderRange[0]}\r\n            sliderMax={priceSliderRange[1]}\r\n            sliderStep={50}\r\n            sliderValues={priceSliderValues}\r\n            onSliderInput={(e, value) => this.setState({ value1: value })}\r\n          />\r\n          <Slider\r\n            value={percent}\r\n            sliderMin={percentSliderRange[0]}\r\n            sliderMax={percentSliderRange[1]}\r\n            sliderStep={1}\r\n            sliderValues={percentSliderValues}\r\n            onSliderInput={(e, value) => this.setState({ percent: value })}\r\n          />\r\n          <div className=\"app-chart\">\r\n            <Chart2\r\n              height=\"100%\"\r\n              width=\"100%\"\r\n              backgroundColor=\"transparent\"\r\n              emissionsToday={emissionsToday}\r\n              emissionsLast={emissionsLast}\r\n              startYear={startYear}\r\n              countOfYears={countOfYears}\r\n              carbonPriceToday={carbonPriceToday}\r\n              priceGivenOnSlider={value1}\r\n              percentGivenOnSlider={percent}\r\n            />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}