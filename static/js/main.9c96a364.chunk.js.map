{"version":3,"sources":["components/Chart/Chart.js","components/Chart/index.js","App.js","serviceWorker.js","index.js"],"names":["Chart","getChartOption","startYear","props","defaultOptions","getEchartDefaultOption","updatedData","updateDataByAddtionalPrice","grid","borderWidth","backgroundColor","legend","show","orient","left","data","map","name","icon","tooltip","trigger","formatter","value","xAxis","type","axisLine","axisTick","splitLine","range","countOfYears","yAxis","nameLocation","nameGap","axisLabel","series","prices","this","priceGivenOnSlider","item","additionalPrice","carbonPriceToday","CO2perTon","currentPrice","idx","animation","position","axisPointer","opacity","textStyle","color","confine","right","bottom","top","containLabel","height","width","style","option","notMerge","lazyUpdate","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c96a364.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport range from 'lodash/range';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\nclass Chart extends Component {\r\n  updateDataByAddtionalPrice() {\r\n    const { data, priceGivenOnSlider, countOfYears } = this.props;\r\n    const updatedData = data.map(item => {\r\n      const additionalPrice = (priceGivenOnSlider - item.carbonPriceToday) / countOfYears;\r\n      const { CO2perTon, currentPrice } = item;\r\n      item['prices'] = range(0, countOfYears).map(idx => additionalPrice * (idx + 1)  * CO2perTon + currentPrice);\r\n      return item;\r\n    });\r\n    return updatedData;\r\n  }\r\n\r\n  getEchartDefaultOption() {\r\n    return {\r\n      animation: true,\r\n      tooltip: {\r\n        trigger: 'item',\r\n        position: 'top',\r\n        axisPointer: {\r\n          type: 'shadow',\r\n        },\r\n        opacity: 0.9,\r\n        backgroundColor: '#ddd',\r\n        textStyle: {\r\n          color: '#000',\r\n        },\r\n        confine: true,\r\n      },\r\n      grid: {\r\n        left: 200,\r\n        right: 60,\r\n        bottom: 50,\r\n        top: 10,\r\n        containLabel: false,\r\n        show: true,\r\n        borderWidth: 0,\r\n      },\r\n      xAxis: [],\r\n      yAxis: [],\r\n      series: [],\r\n    };\r\n  }\r\n\r\n  getChartOption = () => {\r\n    const { startYear } = this.props;\r\n    const defaultOptions = this.getEchartDefaultOption();\r\n    const updatedData = this.updateDataByAddtionalPrice();\r\n    const options = {\r\n      grid: {\r\n        ...defaultOptions.grid,\r\n        borderWidth: 2,\r\n        backgroundColor: 'transparent',\r\n      },\r\n      legend: {\r\n        show: true,\r\n        orient: 'vertical',\r\n        left: 0,\r\n        data: updatedData.map(({ name }) => ({\r\n          name,\r\n          icon: 'circle',\r\n        })),\r\n      },\r\n      tooltip: {\r\n        ...defaultOptions.tooltip,\r\n        trigger: 'item',\r\n        formatter: ({ name, value }) => {\r\n          const tooltipText = `a money would cost <b>${value} kr</b> in ${name}`;\r\n          return tooltipText;\r\n        },\r\n      },\r\n      xAxis: [{\r\n        type: 'category',\r\n        axisLine: { show: false },\r\n        axisTick: { show: false },\r\n        splitLine: { show: false },\r\n        data: range(startYear, startYear + this.props.countOfYears),\r\n      }],\r\n      yAxis: [{\r\n        name: 'Price',\r\n        nameLocation: 'middle',\r\n        nameGap: 35,\r\n        type: 'value',\r\n        axisLabel: {\r\n          formatter: value => (\r\n            value < 1000 ? value : `${value / 1000}k`\r\n          ),\r\n        }\r\n      }],\r\n      series: updatedData.map(({ name, prices }) => ({\r\n        name,\r\n        type: 'line',\r\n        data: prices,\r\n      })),\r\n    };\r\n\r\n    return options;\r\n  }\r\n\r\n  render() {\r\n    const { height, width } = this.props;\r\n    return (\r\n      <ReactEcharts\r\n        style={{ height, width }}\r\n        option={this.getChartOption()}\r\n        notMerge\r\n        lazyUpdate\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;","import Chart from './Chart';\r\nimport './Chart.css';\r\n\r\nexport default Chart;","import React, { Component } from 'react';\r\nimport Chart from './components/Chart';\r\nimport './App.css';\r\n\r\nconst priceGivenOnSlider = 1500;\r\nconst countOfYears = 10;\r\nconst startYear=2021;\r\nconst data = [\r\n  {\r\n    name: 'Banana',\r\n    currentPrice: 2,\r\n    CO2perTon: 0.000072,\r\n    carbonPriceToday: 200,\r\n  },\r\n  {\r\n    name: 'Burger',\r\n    currentPrice: 30,\r\n    CO2perTon: 0.004,\r\n    carbonPriceToday: 200,\r\n  },\r\n  {\r\n    name: 'Book',\r\n    currentPrice: 100,\r\n    CO2perTon: 0.0027,\r\n    carbonPriceToday: 200,\r\n  },\r\n  {\r\n    name: '1L oil',\r\n    currentPrice: 12,\r\n    CO2perTon: 0.002392,\r\n    carbonPriceToday: 200,\r\n  },\r\n  {\r\n    name: 'A flight to London',\r\n    currentPrice: 500,\r\n    CO2perTon: 0.212,\r\n    carbonPriceToday: 200,\r\n  }\r\n];\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>CHART EXAMPLE</h1>\r\n        <Chart\r\n          priceGivenOnSlider={priceGivenOnSlider}\r\n          countOfYears={countOfYears}\r\n          startYear={startYear}\r\n          data={data}\r\n          height=\"500px\"\r\n          width=\"100%\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}